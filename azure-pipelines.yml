# Build, test and package pipeline for SpecFlow.Contrib.Variants package
# Versioning of package currently managed by variables

trigger:
- release
- develop

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  packageVersion: '1.1.2'
  packageVersionPre: '1.1.2-develop'
  vmImage: 'windows-latest'

stages:
- stage: build_test
  pool:
    vmImage: '$(vmImage)'
  jobs:
  - job: build
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: VSTest@2
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*UnitTests.dll
          !**\*TestAdapter.dll
          !**\obj\**
    #- task: CopyFiles@2
    #  inputs:
    #    contents: |
    #      **\SpecFlow.Contrib.Variants.SpecFlowPlugin\bin\$(buildConfiguration)\**
    #      **\*.nuspec
    #      **\*.xdt
    #    targetFolder: $(Build.ArtifactStagingDirectory)
    #- task: PublishBuildArtifacts@1
    #  inputs:
    #    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #    artifactName: drop    
    - task: CopyFiles@2
      inputs:
        contents: |
          **\SpecFlow.Contrib.Variants.*\bin\$(buildConfiguration)\**
          !**\SpecFlow.Contrib.Variants.UnitTests\**
        targetFolder: $(Build.ArtifactStagingDirectory)\test
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\test'
        artifactName: test



## THE BELOW IS FOR RUNNING THE INTEGRATION TESTS AS A NEW JOB
- stage: integration_tests
  pool:
    vmImage: '$(vmImage)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))  
  jobs:
  - job: pull_integrationtests
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'test'
        downloadPath: '$(System.ArtifactsDirectory)\test'
  - job: run_tests
    strategy:
      parallel: 3
    steps:
    - task: VSTest@2
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*IntegrationTests.dll
          !**\*TestAdapter.dll
          !**\obj\**
        searchFolder: '$(System.ArtifactsDirectory)\test'
        distributionBatchType: 'basedOnAssembly'
        #uiTests: true


#- stage: deploy_package
 # pool:
 #   vmImage: '$(vmImage)'
 # jobs:
 # - job: deploy_prerelease
 #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))  
 #   steps:
 #   - task: DownloadBuildArtifacts@0
 #     inputs:
 #       buildType: 'current'
 #       downloadType: 'single'
 #       artifactName: 'drop'
 #       downloadPath: '$(System.ArtifactsDirectory)'
 #   - task: NuGetToolInstaller@1
 #   - task: NuGetCommand@2
 #     inputs:
 #       command: 'pack'
 #       packagesToPack: '$(System.ArtifactsDirectory)\**\*.nuspec'
 #       versioningScheme: 'byEnvVar'
 #       versionEnvVar: 'packageVersionPre'
 #   - task: NuGetCommand@2
 #     inputs:
 #       command: 'push'
 #       packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
 #       nuGetFeedType: 'internal'
 #       publishVstsFeed: '8cc48bdf-30e3-409a-9f50-1d2e6944e896/ee5c684a-40df-48ba-b303-1a8a5ca628e5'
 # - job: deploy_release
 #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))  
 #   steps:
 #   - task: DownloadBuildArtifacts@0
 #     inputs:
 #       buildType: 'current'
 #       downloadType: 'single'
 #       artifactName: 'drop'
 #       downloadPath: '$(System.ArtifactsDirectory)'
 #   - task: NuGetToolInstaller@1
 #   - task: NuGetCommand@2
 #     inputs:
 #       command: 'pack'
 #       packagesToPack: '$(System.ArtifactsDirectory)\**\*.nuspec'
 #       versioningScheme: 'byEnvVar'
 #       versionEnvVar: 'packageVersion'
 #   - task: NuGetCommand@2
 #     inputs:
 #       command: 'push'
 #       packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
 #       nuGetFeedType: 'external'
 #       publishFeedCredentials: 'Nuget'