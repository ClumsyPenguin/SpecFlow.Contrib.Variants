# Build, test and package pipeline for SpecFlow.Contrib.Variants package
# Versioning of package currently managed by variables

trigger:
- release
- develop

variables:
  solution: '**\*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  packageVersion: '3.1.30-pre'
  packageVersionPre: '3.1.30-develop'
  vmImage: 'windows-latest'

stages:
- stage: build_test_pack
  displayName: "Build, run tests & pack"
  pool:
    vmImage: '$(vmImage)'
  jobs:
  - job: build
    displayName: "Build & run unit tests"
    steps:
    - task: NuGetCommand@2
      displayName: "Restore UnitTests packages"
      inputs:
        restoreSolution: '**/SpecFlow.Contrib.Variants.UnitTests/packages.config'
        restoreDirectory: '$(Build.Repository.LocalPath)\packages'
        feedsToUse: 'select'
        vstsFeed: '8cc48bdf-30e3-409a-9f50-1d2e6944e896/ee5c684a-40df-48ba-b303-1a8a5ca628e5'
    - task: DotNetCoreCLI@2
      displayName: "Build unit tests cproj"
      inputs:
        command: 'build'
        projects: '**\SpecFlow.Contrib.Variants.UnitTests.csproj'
    - task: VSTest@2
      displayName: "Run unit tests"
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*UnitTests.dll
          !**\*TestAdapter.dll
          !**\obj\**
  - job: pack_prerelease
    displayName: "Pack nupkg for DevOps feed"
    dependsOn: build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    steps:
    - task: DotNetCoreCLI@2
      displayName: "Pack main csproj"
      inputs:
        command: 'pack'
        packagesToPack: '**/SpecFlow.Contrib.Variants.csproj'
        versioningScheme: 'byEnvVar'
        packDirectory: '$(Build.ArtifactStagingDirectory)'
        versionEnvVar: 'packageVersionPre'
    - task: PublishBuildArtifacts@1
      displayName: "Publish nupkg as artifact"
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: prerelease
  - job: pack_test_release
    displayName: "Integration tests, pack nupkg for Nuget feed"
    dependsOn: build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.101
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: NuGetCommand@2
      displayName: "Restore SharedBindings packages"
      inputs:
        restoreSolution: '**/SpecFlow.Contrib.Variants.IntegrationTests.SharedBindings/packages.config'
        restoreDirectory: '$(Build.Repository.LocalPath)\packages'
        feedsToUse: 'select'
        vstsFeed: '8cc48bdf-30e3-409a-9f50-1d2e6944e896/ee5c684a-40df-48ba-b303-1a8a5ca628e5'
    - task: NuGetCommand@2
      displayName: "Restore framework integration tests projects"
      inputs:
        restoreSolution: '**/SpecFlow.Contrib.Variants.*Provider.IntegrationTests/packages.config'
        restoreDirectory: '$(Build.Repository.LocalPath)\packages'
        feedsToUse: 'select'
        vstsFeed: '8cc48bdf-30e3-409a-9f50-1d2e6944e896/ee5c684a-40df-48ba-b303-1a8a5ca628e5'
    - task: DotNetCoreCLI@2
      displayName: "Restore core integration tests projects"
      inputs:
        command: 'restore'
        projects: '**\*Core*.IntegrationTests.csproj'
        feedsToUse: 'select'
        vstsFeed: '8cc48bdf-30e3-409a-9f50-1d2e6944e896/ee5c684a-40df-48ba-b303-1a8a5ca628e5'
    - task: DotNetCoreCLI@2
      displayName: "Build integration tests projects"
      inputs:
        command: 'build'
        projects: '**\*.IntegrationTests.csproj'
    - task: VSTest@2
      displayName: "Run integration tests"
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*.IntegrationTests.dll
          !**\*TestAdapter.dll
          !**\obj\**
        distributionBatchType: 'basedOnAssembly'
        uiTests: true
    - task: DotNetCoreCLI@2
      displayName: "Pack main csproj"
      inputs:
        command: 'pack'
        packagesToPack: '**/SpecFlow.Contrib.Variants.csproj'
        versioningScheme: 'byEnvVar'
        packDirectory: '$(Build.ArtifactStagingDirectory)'
        versionEnvVar: 'packageVersion'
    - task: PublishBuildArtifacts@1
      displayName: "Publish nupkg as artifact"
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: release

- stage: deploy_package
  displayName: "Push nupkg to feed"
  pool:
    vmImage: '$(vmImage)'
  jobs:
  - job: deploy_prerelease
    displayName: "Push nupkg to DevOps feed"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))  
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: "Download nupkg artifact"
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'prerelease'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: NuGetCommand@2
      displayName: "Push to feed"
      inputs:
        command: 'push'
        packagesToPush: '$(System.ArtifactsDirectory)\prerelease\*.nupkg;!$(System.ArtifactsDirectory)\prerelease\*.symbols.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '8cc48bdf-30e3-409a-9f50-1d2e6944e896/ee5c684a-40df-48ba-b303-1a8a5ca628e5'
        allowPackageConflicts: true
  - job: deploy_release
    displayName: "Push nupkg to Nuget feed"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))  
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: "Download nupkg artifact"
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'release'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: NuGetCommand@2
      displayName: "Push to feed"
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)\release\*.nupkg;!$(Build.ArtifactStagingDirectory)\release\*.symbols.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'Nuget'